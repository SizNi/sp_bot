import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session
from app.database.database import get_db
from app.database.models import User, Challenge
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def get_or_create_user(db, tg_user: types.User):
    user = db.query(User).filter(User.telegram_id == tg_user.id).first()
    if not user:
        user = User(
            telegram_id=tg_user.id,
            username=tg_user.username,
            first_name=tg_user.first_name,
            last_name=tg_user.last_name,
            avatar_url=None,  # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ Telegram API, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            created_at=datetime.now()  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        )
        db.add(user)
        db.commit()
        db.refresh(user)
    return user

def is_admin(db, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user = db.query(User).filter(User.telegram_id == user_id).first()
    return user and user.is_admin

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    db = next(get_db())
    user = get_or_create_user(db, message.from_user)
    
    help_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username or '–∏–≥—Ä–æ–∫'}! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/–≤—ã–∑–æ–≤ @username - –≤—ã–∑–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –º–∞—Ç—á\n"
        "/challenges - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –≤—ã–∑–æ–≤—ã"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if user.is_admin:
        help_text += "\n\n–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        help_text += "/addadmin @username - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        help_text += "/removeadmin @username - —É–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        help_text += "/tournament - —Å–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
    
    await message.answer(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /–≤—ã–∑–æ–≤
@dp.message(Command("–≤—ã–∑–æ–≤"))
async def cmd_challenge(message: types.Message):
    if not message.entities:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–≤—ã–∑–æ–≤ @username")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    username = None
    for entity in message.entities:
        if entity.type == "mention":
            username = message.text[entity.offset + 1:entity.offset + entity.length]
            break
    
    if not username:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–≤—ã–∑–æ–≤ @username")
        return
    
    db = next(get_db())
    challenger = get_or_create_user(db, message.from_user)
    challenged = db.query(User).filter(User.username == username).first()
    
    if not challenged:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    if challenger.id == challenged.id:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–∏ —Å–µ–±—è.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 –≤—ã–∑–æ–≤ –≤ –¥–µ–Ω—å
    today = datetime.now().date()
    existing_challenge = db.query(Challenge).filter(
        Challenge.challenger_id == challenger.id,
        Challenge.created_at >= today
    ).first()
    
    if existing_challenge:
        await message.answer("–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –≤—ã–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã–∑–æ–≤
    new_challenge = Challenge(
        challenger_id=challenger.id,
        challenged_id=challenged.id,
        status="pending"
    )
    db.add(new_challenge)
    db.commit()
    db.refresh(new_challenge)
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{new_challenge.id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{new_challenge.id}")
    )
    
    await message.answer(
        f"üéæ –í—ã–∑–æ–≤ –æ—Ç @{challenger.username} –¥–ª—è @{challenged.username}!\n\n"
        f"–ü—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –≤—ã–∑–æ–≤:",
        reply_markup=keyboard.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞
@dp.callback_query(lambda c: c.data.startswith("accept_"))
async def accept_challenge(callback: types.CallbackQuery):
    challenge_id = int(callback.data.split("_")[1])
    db = next(get_db())
    
    challenge = db.query(Challenge).filter(Challenge.id == challenge_id).first()
    if not challenge:
        await callback.answer("–í—ã–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
    if not user or user.id != challenge.challenged_id:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–æ—Ç –≤—ã–∑–æ–≤")
        return
    
    if challenge.status != "pending":
        await callback.answer("–í—ã–∑–æ–≤ —É–∂–µ –Ω–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏")
        return
    
    challenge.status = "accepted"
    challenge.accepted_at = datetime.now()
    db.commit()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="üèÜ –Ø –ø–æ–±–µ–¥–∏–ª", callback_data=f"result_{challenge_id}_won"),
        InlineKeyboardButton(text="üíÄ –Ø –ø—Ä–æ–∏–≥—Ä–∞–ª", callback_data=f"result_{challenge_id}_lost")
    )
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç!\n\n"
        f"–ü–æ—Å–ª–µ –º–∞—Ç—á–∞ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω—ã –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º:",
        reply_markup=keyboard.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–∑–æ–≤–∞
@dp.callback_query(lambda c: c.data.startswith("decline_"))
async def decline_challenge(callback: types.CallbackQuery):
    challenge_id = int(callback.data.split("_")[1])
    db = next(get_db())
    
    challenge = db.query(Challenge).filter(Challenge.id == challenge_id).first()
    if not challenge:
        await callback.answer("–í—ã–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
    if not user or user.id != challenge.challenged_id:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ—Ç –≤—ã–∑–æ–≤")
        return
    
    if challenge.status != "pending":
        await callback.answer("–í—ã–∑–æ–≤ —É–∂–µ –Ω–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏")
        return
    
    challenge.status = "declined"
    db.commit()
    
    await callback.message.edit_text("‚ùå –í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
@dp.callback_query(lambda c: c.data.startswith("result_"))
async def submit_result(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    challenge_id = int(parts[1])
    result = parts[2]
    
    db = next(get_db())
    challenge = db.query(Challenge).filter(Challenge.id == challenge_id).first()
    if not challenge:
        await callback.answer("–í—ã–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = db.query(User).filter(User.telegram_id == callback.from_user.id).first()
    if not user:
        await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –ø–æ–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    is_challenger = challenge.challenger_id == user.id
    is_challenged = challenge.challenged_id == user.id
    
    if not (is_challenger or is_challenged):
        await callback.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –≤—ã–∑–æ–≤–µ")
        return
    
    if challenge.status != "accepted":
        await callback.answer("–í—ã–∑–æ–≤ –Ω–µ –ø—Ä–∏–Ω—è—Ç")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if is_challenger:
        challenge.challenger_result = result
    else:
        challenge.challenged_result = result
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–∞ –ª–∏ –∏–≥—Ä–æ–∫–∞ –ø–æ–¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if challenge.challenger_result and challenge.challenged_result:
        # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if challenge.challenger_result == challenge.challenged_result:
            await callback.answer("–û—à–∏–±–∫–∞: –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –Ω–µ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if challenge.challenger_result == "won":
            winner_id = challenge.challenger_id
            loser_id = challenge.challenged_id
        else:
            winner_id = challenge.challenged_id
            loser_id = challenge.challenger_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        winner = db.query(User).filter(User.id == winner_id).first()
        loser = db.query(User).filter(User.id == loser_id).first()
        
        if winner and loser:
            winner.rating += 10
            loser.rating = max(0, loser.rating - 10)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–∑–æ–≤
        challenge.status = "completed"
        challenge.completed_at = datetime.now()
        db.commit()
        
        await callback.message.edit_text(
            f"üèÜ –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner.username if winner else 'Unknown'}\n"
            f"–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: @{loser.username if loser else 'Unknown'}\n\n"
            f"–†–µ–π—Ç–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"
        )
    else:
        await callback.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω: {result}")
        db.commit()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–∑–æ–≤–æ–≤
@dp.message(Command("challenges"))
async def cmd_challenges(message: types.Message):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    challenges = db.query(Challenge).filter(
        (Challenge.challenger_id == user.id) | (Challenge.challenged_id == user.id)
    ).order_by(Challenge.created_at.desc()).limit(5).all()
    
    if not challenges:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤.")
        return
    
    text = "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–∑–æ–≤—ã:\n\n"
    for challenge in challenges:
        challenger = db.query(User).filter(User.id == challenge.challenger_id).first()
        challenged = db.query(User).filter(User.id == challenge.challenged_id).first()
        
        status_emoji = {
            "pending": "‚è≥",
            "accepted": "‚úÖ",
            "declined": "‚ùå",
            "completed": "üèÜ"
        }.get(challenge.status, "‚ùì")
        
        text += f"{status_emoji} @{challenger.username} vs @{challenged.username} - {challenge.status}\n"
    
    await message.answer(text)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("addadmin"))
async def cmd_add_admin(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    db = next(get_db())
    if not is_admin(db, message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not message.entities:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin @username")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    username = None
    for entity in message.entities:
        if entity.type == "mention":
            username = message.text[entity.offset + 1:entity.offset + entity.length]
            break
    
    if not username:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin @username")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user = db.query(User).filter(User.username == username).first()
    if not target_user:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    if target_user.is_admin:
        await message.answer(f"@{username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –î–µ–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    target_user.is_admin = True
    db.commit()
    
    await message.answer(f"‚úÖ @{username} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("removeadmin"))
async def cmd_remove_admin(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    db = next(get_db())
    if not is_admin(db, message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not message.entities:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeadmin @username")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    username = None
    for entity in message.entities:
        if entity.type == "mention":
            username = message.text[entity.offset + 1:entity.offset + entity.length]
            break
    
    if not username:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeadmin @username")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user = db.query(User).filter(User.username == username).first()
    if not target_user:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    
    if not target_user.is_admin:
        await message.answer(f"@{username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    target_user.is_admin = False
    db.commit()
    
    await message.answer(f"‚úÖ @{username} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message(Command("tournament"))
async def cmd_create_tournament(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    db = next(get_db())
    if not is_admin(db, message.from_user.id):
        await message.answer("‚ùå –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
        return
    
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    await message.answer(
        "üèÜ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
        "–í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞.\n"
        "–ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤."
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 